// DO NOT MODIFY DIRECTLY
// This file was generated by the tools.rem.GenerateAst
package org.rem.parser.ast;

import org.rem.parser.Token;
import java.util.List;

public abstract class Statement extends AST {
  public abstract<T> T accept(Visitor<T> visitor);
  public abstract void accept(VoidVisitor visitor);

  @Override public String astName() {
    return "statement";
  }

  public interface Visitor<T> {
    T visitEchoStatement(Echo statement);
    T visitSimpleStatement(Simple statement);
    T visitIfStatement(If statement);
    T visitForStatement(For statement);
    T visitWhileStatement(While statement);
    T visitDoWhileStatement(DoWhile statement);
    T visitContinueStatement(Continue statement);
    T visitBreakStatement(Break statement);
    T visitRaiseStatement(Raise statement);
    T visitReturnStatement(Return statement);
    T visitAssertStatement(Assert statement);
    T visitUsingStatement(Using statement);
    T visitImportStatement(Import statement);
    T visitCatchStatement(Catch statement);
    T visitBlockStatement(Block statement);
    T visitVarStatement(Var statement);
    T visitExternStatement(Extern statement);
    T visitFunctionStatement(Function statement);
    T visitMethodStatement(Method statement);
    T visitPropertyStatement(Property statement);
    T visitClassStatement(Class statement);
    T visitVarListStatement(VarList statement);
    T visitStatement(Statement statement);
  }


  public interface VoidVisitor {
    void visitEchoStatement(Echo statement);
    void visitSimpleStatement(Simple statement);
    void visitIfStatement(If statement);
    void visitForStatement(For statement);
    void visitWhileStatement(While statement);
    void visitDoWhileStatement(DoWhile statement);
    void visitContinueStatement(Continue statement);
    void visitBreakStatement(Break statement);
    void visitRaiseStatement(Raise statement);
    void visitReturnStatement(Return statement);
    void visitAssertStatement(Assert statement);
    void visitUsingStatement(Using statement);
    void visitImportStatement(Import statement);
    void visitCatchStatement(Catch statement);
    void visitBlockStatement(Block statement);
    void visitVarStatement(Var statement);
    void visitExternStatement(Extern statement);
    void visitFunctionStatement(Function statement);
    void visitMethodStatement(Method statement);
    void visitPropertyStatement(Property statement);
    void visitClassStatement(Class statement);
    void visitVarListStatement(VarList statement);
    void visitStatement(Statement statement);
  }

  public static class Echo extends Statement {
    public final Expression value;

    public Echo(Expression value) {
      this.value = value;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitEchoStatement(this);
    }

    public void accept(VoidVisitor visitor) {
      visitor.visitEchoStatement(this);
    }

    @Override public String astName() {
      return "echo statement";
    }
  }

  public static class Simple extends Statement {
    public final Expression expression;

    public Simple(Expression expression) {
      this.expression = expression;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitSimpleStatement(this);
    }

    public void accept(VoidVisitor visitor) {
      visitor.visitSimpleStatement(this);
    }

    @Override public String astName() {
      return "simple statement";
    }
  }

  public static class If extends Statement {
    public final Expression condition;
    public final Statement thenBranch;
    public final Statement elseBranch;

    public If(Expression condition, Statement thenBranch, Statement elseBranch) {
      this.condition = condition;
      this.thenBranch = thenBranch;
      this.elseBranch = elseBranch;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitIfStatement(this);
    }

    public void accept(VoidVisitor visitor) {
      visitor.visitIfStatement(this);
    }

    @Override public String astName() {
      return "if statement";
    }
  }

  public static class For extends Statement {
    public final Statement declaration;
    public final Expression condition;
    public final Simple interation;
    public final Block body;

    public Object continueBlock;
    public Object exitBlock;

    public For(Statement declaration, Expression condition, Simple interation, Block body) {
      this.declaration = declaration;
      this.condition = condition;
      this.interation = interation;
      this.body = body;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitForStatement(this);
    }

    public void accept(VoidVisitor visitor) {
      visitor.visitForStatement(this);
    }

    @Override public String astName() {
      return "for statement";
    }
  }

  public static class While extends Statement {
    public final Expression condition;
    public final Block body;

    public While(Expression condition, Block body) {
      this.condition = condition;
      this.body = body;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitWhileStatement(this);
    }

    public void accept(VoidVisitor visitor) {
      visitor.visitWhileStatement(this);
    }

    @Override public String astName() {
      return "while statement";
    }
  }

  public static class DoWhile extends Statement {
    public final Block body;
    public final Expression condition;

    public DoWhile(Block body, Expression condition) {
      this.body = body;
      this.condition = condition;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitDoWhileStatement(this);
    }

    public void accept(VoidVisitor visitor) {
      visitor.visitDoWhileStatement(this);
    }

    @Override public String astName() {
      return "dowhile statement";
    }
  }

  public static class Continue extends Statement {
    public Continue() {
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitContinueStatement(this);
    }

    public void accept(VoidVisitor visitor) {
      visitor.visitContinueStatement(this);
    }

    @Override public String astName() {
      return "continue statement";
    }
  }

  public static class Break extends Statement {
    public Break() {
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitBreakStatement(this);
    }

    public void accept(VoidVisitor visitor) {
      visitor.visitBreakStatement(this);
    }

    @Override public String astName() {
      return "break statement";
    }
  }

  public static class Raise extends Statement {
    public final Expression exception;

    public Raise(Expression exception) {
      this.exception = exception;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitRaiseStatement(this);
    }

    public void accept(VoidVisitor visitor) {
      visitor.visitRaiseStatement(this);
    }

    @Override public String astName() {
      return "raise statement";
    }
  }

  public static class Return extends Statement {
    public final Expression value;

    public Return(Expression value) {
      this.value = value;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitReturnStatement(this);
    }

    public void accept(VoidVisitor visitor) {
      visitor.visitReturnStatement(this);
    }

    @Override public String astName() {
      return "return statement";
    }
  }

  public static class Assert extends Statement {
    public final Expression expression;
    public final Expression message;

    public Assert(Expression expression, Expression message) {
      this.expression = expression;
      this.message = message;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitAssertStatement(this);
    }

    public void accept(VoidVisitor visitor) {
      visitor.visitAssertStatement(this);
    }

    @Override public String astName() {
      return "assert statement";
    }
  }

  public static class Using extends Statement {
    public final Expression expression;
    public final List<Expression> caseLabels;
    public final List<Statement> caseBodies;
    public final Statement defaultCase;

    public Using(Expression expression, List<Expression> caseLabels, List<Statement> caseBodies, Statement defaultCase) {
      this.expression = expression;
      this.caseLabels = caseLabels;
      this.caseBodies = caseBodies;
      this.defaultCase = defaultCase;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitUsingStatement(this);
    }

    public void accept(VoidVisitor visitor) {
      visitor.visitUsingStatement(this);
    }

    @Override public String astName() {
      return "using statement";
    }
  }

  public static class Import extends Statement {
    public final String path;
    public final List<Token> elements;
    public final boolean all;

    public Import(String path, List<Token> elements, boolean all) {
      this.path = path;
      this.elements = elements;
      this.all = all;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitImportStatement(this);
    }

    public void accept(VoidVisitor visitor) {
      visitor.visitImportStatement(this);
    }

    @Override public String astName() {
      return "import statement";
    }
  }

  public static class Catch extends Statement {
    public final Block body;
    public final Block catchBody;
    public final Block finallyBody;
    public final Expression.Identifier name;

    public Catch(Block body, Block catchBody, Block finallyBody, Expression.Identifier name) {
      this.body = body;
      this.catchBody = catchBody;
      this.finallyBody = finallyBody;
      this.name = name;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitCatchStatement(this);
    }

    public void accept(VoidVisitor visitor) {
      visitor.visitCatchStatement(this);
    }

    @Override public String astName() {
      return "catch statement";
    }
  }

  public static class Block extends Statement {
    public final List<Statement> body;

    public Block(List<Statement> body) {
      this.body = body;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitBlockStatement(this);
    }

    public void accept(VoidVisitor visitor) {
      visitor.visitBlockStatement(this);
    }

    @Override public String astName() {
      return "block statement";
    }
  }

  public static class Var extends Statement {
    public final Expression.TypedName typedName;
    public final Expression value;
    public final boolean isConstant;

    public Var(Expression.TypedName typedName, Expression value, boolean isConstant) {
      this.typedName = typedName;
      this.value = value;
      this.isConstant = isConstant;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitVarStatement(this);
    }

    public void accept(VoidVisitor visitor) {
      visitor.visitVarStatement(this);
    }

    @Override public String astName() {
      return "var statement";
    }
  }

  public static class Extern extends Statement {
    public final Token name;
    public final List<Expression.TypedName> parameters;
    public final Typed returnType;
    public final boolean isVariadic;

    public Extern(Token name, List<Expression.TypedName> parameters, Typed returnType, boolean isVariadic) {
      this.name = name;
      this.parameters = parameters;
      this.returnType = returnType;
      this.isVariadic = isVariadic;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitExternStatement(this);
    }

    public void accept(VoidVisitor visitor) {
      visitor.visitExternStatement(this);
    }

    @Override public String astName() {
      return "extern statement";
    }
  }

  public static class Function extends Statement {
    public final Token name;
    public final List<Expression.TypedName> parameters;
    public final Typed returnType;
    public final Statement.Block body;
    public final boolean isVariadic;

    public Function(Token name, List<Expression.TypedName> parameters, Typed returnType, Statement.Block body, boolean isVariadic) {
      this.name = name;
      this.parameters = parameters;
      this.returnType = returnType;
      this.body = body;
      this.isVariadic = isVariadic;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitFunctionStatement(this);
    }

    public void accept(VoidVisitor visitor) {
      visitor.visitFunctionStatement(this);
    }

    @Override public String astName() {
      return "function statement";
    }
  }

  public static class Method extends Statement {
    public final Token name;
    public final List<Expression.TypedName> parameters;
    public final Typed returnType;
    public final Statement.Block body;
    public final boolean isVariadic;
    public final boolean isStatic;

    public Method(Token name, List<Expression.TypedName> parameters, Typed returnType, Statement.Block body, boolean isVariadic, boolean isStatic) {
      this.name = name;
      this.parameters = parameters;
      this.returnType = returnType;
      this.body = body;
      this.isVariadic = isVariadic;
      this.isStatic = isStatic;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitMethodStatement(this);
    }

    public void accept(VoidVisitor visitor) {
      visitor.visitMethodStatement(this);
    }

    @Override public String astName() {
      return "method statement";
    }
  }

  public static class Property extends Statement {
    public final Expression.TypedName name;
    public final Expression value;
    public final boolean isStatic;
    public final boolean isConstant;

    public Property(Expression.TypedName name, Expression value, boolean isStatic, boolean isConstant) {
      this.name = name;
      this.value = value;
      this.isStatic = isStatic;
      this.isConstant = isConstant;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitPropertyStatement(this);
    }

    public void accept(VoidVisitor visitor) {
      visitor.visitPropertyStatement(this);
    }

    @Override public String astName() {
      return "property statement";
    }
  }

  public static class Class extends Statement {
    public final Token name;
    public final Expression.Identifier superclass;
    public final List<Property> properties;
    public final List<Method> methods;
    public final List<Method> operators;

    public Class(Token name, Expression.Identifier superclass, List<Property> properties, List<Method> methods, List<Method> operators) {
      this.name = name;
      this.superclass = superclass;
      this.properties = properties;
      this.methods = methods;
      this.operators = operators;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitClassStatement(this);
    }

    public void accept(VoidVisitor visitor) {
      visitor.visitClassStatement(this);
    }

    @Override public String astName() {
      return "class statement";
    }
  }

  public static class VarList extends Statement {
    public final List<Statement> declarations;

    public VarList(List<Statement> declarations) {
      this.declarations = declarations;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitVarListStatement(this);
    }

    public void accept(VoidVisitor visitor) {
      visitor.visitVarListStatement(this);
    }

    @Override public String astName() {
      return "varlist statement";
    }
  }
}
