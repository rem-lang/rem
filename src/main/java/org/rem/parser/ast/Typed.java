// DO NOT MODIFY DIRECTLY
// This file was generated by the tools.rem.GenerateAst
package org.rem.parser.ast;

import org.rem.parser.Token;
import java.util.List;

public abstract class Typed extends AST {
  public abstract<T> T accept(Visitor<T> visitor);
  public abstract void accept(VoidVisitor visitor);

  @Override public String astName() {
    return "typed";
  }

  public interface Visitor<T> {
    T visitIdTyped(Id typed);
    T visitArrayTyped(Array typed);
    T visitParameterizedTyped(Parameterized typed);
    T visitMapTyped(Map typed);
    T visitTyped(Typed typed);
  }


  public interface VoidVisitor {
    void visitIdTyped(Id typed);
    void visitArrayTyped(Array typed);
    void visitParameterizedTyped(Parameterized typed);
    void visitMapTyped(Map typed);
    void visitTyped(Typed typed);
  }

  public static class Id extends Typed {
    public final String name;

    public Id(String name) {
      this.name = name;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitIdTyped(this);
    }

    public void accept(VoidVisitor visitor) {
      visitor.visitIdTyped(this);
    }

    @Override public String astName() {
      return "id typed";
    }
  }

  public static class Array extends Typed {
    public final String name;

    public Array(String name) {
      this.name = name;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitArrayTyped(this);
    }

    public void accept(VoidVisitor visitor) {
      visitor.visitArrayTyped(this);
    }

    @Override public String astName() {
      return "array typed";
    }
  }

  public static class Parameterized extends Typed {
    public final String name;
    public final Typed innerType;

    public Parameterized(String name, Typed innerType) {
      this.name = name;
      this.innerType = innerType;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitParameterizedTyped(this);
    }

    public void accept(VoidVisitor visitor) {
      visitor.visitParameterizedTyped(this);
    }

    @Override public String astName() {
      return "parameterized typed";
    }
  }

  public static class Map extends Typed {
    public final String name;
    public final Typed keyType;
    public final Typed valueType;

    public Map(String name, Typed keyType, Typed valueType) {
      this.name = name;
      this.keyType = keyType;
      this.valueType = valueType;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitMapTyped(this);
    }

    public void accept(VoidVisitor visitor) {
      visitor.visitMapTyped(this);
    }

    @Override public String astName() {
      return "map typed";
    }
  }
}
